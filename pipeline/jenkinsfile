pipeline {
    agent any

    stages {

        stage('Clean Workspace') {
            steps {
                cleanWs() // Clean the workspace
            }
        }

        stage('Checkout Repository') {
            steps {
                checkout scm // Clone the repository
            }
        }

        stage('Build Containers') {
            steps {
                script {
                    dir('elk-stack') { 
                        // List directory contents
                        bat 'dir'
                        // Bring down any running containers
                        bat 'docker-compose down'
                        // Start up the containers in detached mode
                        bat 'docker-compose up -d'

                        // Check if Kibana is running
                        def logs = bat(script: 'docker-compose logs kibana', returnStdout: true).trim()
                        echo logs
                    }
                }
            }
        }

        stage('Check Ports and Logs') {
            steps {
                script {
                    dir('elk-stack') {
                        // Check ports for all services
                        def services = ['elasticsearch', 'kibana', 'logstash', 'grafana']
                        services.each { service ->
                            echo "Checking port configuration for ${service}..."
                            bat "curl -f http://localhost:${getPort(service)}" // Replace getPort with actual port numbers
                            
                            // Log the logs for each service
                            def serviceLogs = bat(script: "docker-compose logs ${service}", returnStdout: true).trim()
                            echo "Logs for ${service}:\n${serviceLogs}"
                        }
                    }
                }
            }
        }

        stage('Run Logstash') {
            steps {
                script {
                    // Start Logstash
                    bat 'docker-compose up -d logstash'

                    // Optional: wait and check Logstash health
                    sleep(time: 120, unit: 'SECONDS')  // Adjust this as needed
                    bat 'docker-compose ps' // Check the status of the containers
                }
            }
        }
          stage('Wait for Elasticsearch') {
            steps {
                script {
                    sleep(time: 30, unit: 'SECONDS') // Initial wait

                    def portOpen = false
                    def retries = 2
                    def waitTime = 5 // seconds

                    while (!portOpen && retries > 0) {
                        try {
                            bat "curl -f http://localhost:9200" // Check if port is open
                            portOpen = true
                        } catch (Exception e) {
                            echo "Port not open yet. Retrying..."
                            sleep(time: waitTime, unit: 'SECONDS')
                            retries--
                        }
                    }

                    if (!portOpen) {
                        error "Elasticsearch did not start in time!"
                    }
                }
            }
        }

        stage('Teardown') {
            steps {
                script {
                    dir('elk-stack'){
                        bat 'docker-compose down' // Tear down the containers after the process
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Process completed. Cleaning up...'
            bat 'docker-compose down' // Ensure containers are down after completion
        }
    }
}

// Function to get the port for each service
def getPort(service) {
    switch(service) {
        case 'elasticsearch':
            return '9200'
        case 'kibana':
            return '5601'
        case 'logstash':
            return '5044' // Change if you're using a different port
        case 'grafana':
            return '3000'
        default:
            return 'unknown'
    }
}
